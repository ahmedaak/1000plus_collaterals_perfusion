allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR[allpts$iv_tPR==2] <- "Yes" # CHECK WITH KERSTEN IF THIS IS CORRECTLY CODED
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
# correctly code NaNs
allpts[allpts=="NaN"]<-NA
# Defines whether (T) or not (F) to show outliers in boxplots
OL = F
View(allpts)
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
library(summarytools)
library(magrittr)
library(kableExtra)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=";")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# exclude subject 86 (not in Kersten's main dataset)
vols_all_pts <- vols_all_pts[!vols_all_pts$ID=="86",]
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Tmax_D1_.8_volume/vols_all_pts$Tmax_D1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Tmax_D2_.8_volume/vols_all_pts$Tmax_D2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# rename Tmax volume variables to include threshold (>6s)
allpts$Tmax_D1_.6_volume <- allpts$Tmax_vol_d1
allpts$Tmax_D2_.6_volume <- allpts$Tmax_vol_d2
allpts$Tmax_vol_d1 <- c()
allpts$Tmax_vol_d2 <- c()
allpts$Tmax_change <- c()
allpts$relTmax_change <- c()
# create change variables for other thresholds (>4s)
allpts$Tmax_4_change <- allpts$Tmax_D2_.4_volume - allpts$Tmax_D1_.4_volume
allpts$relTmax_4_change <- (allpts$Tmax_4_change/allpts$Tmax_D1_.4_volume)*100
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_4_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_4_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
allpts$Rekan <- factor(allpts$Rekan)
allpts$Rekan <- factor(allpts$Rekan,levels(allpts$Rekan)[c(2,3,1)])
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR[allpts$iv_tPR==2] <- "Yes" # CHECK WITH KERSTEN IF THIS IS CORRECTLY CODED
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
# merge with variables defining occlusion location
occ_classfn <- read.table("occlusion_classfn.csv", header = T, sep=";")
allpts <- merge(allpts, occ_classfn, by = "ID")
# correctly code NaNs
allpts[allpts=="NaN"]<-NA
# Defines whether (T) or not (F) to show outliers in boxplots
OL = F
View(allpts)
# choose non-recanalizers
nonrecan <- allpts[allpts$Rekan=="None"&allpts$OCC_LOC_1=="PROXIMAL",]
nonrecan_data <- data.frame(nonrecan$infarct_growth, nonrecan$reperf)
# barplot of reperfusion vs infarct growth
barplot(table(nonrecan_data),legend.text = c("No infarct growth", "Infarct growth"), col=c("#1b9e77","#d95f02"), xlab="Reperfusion", ylab="Number of patients", xpd=F,args.legend = list(x = "topright"), main="Non-recanalizers")
# crosstab of reperfusion vs infarct growth
kable(table(nonrecan_data)) %>%
kable_styling(full_width=F, position="center") %>%
add_header_above(c(" "=1, "Reperfusion"=2)) %>%
group_rows("Infarct growth",1,2)
# test for differences between reperfusion and infarct growth
print(chisq.test(table(nonrecan$reperf, nonrecan$infarct_growth)))
# choose non-recanalizers
nonrecan <- allpts[allpts$Rekan=="None"&allpts$OCC_LOC_1=="DISTAL",]
nonrecan_data <- data.frame(nonrecan$infarct_growth, nonrecan$reperf)
# barplot of reperfusion vs infarct growth
barplot(table(nonrecan_data),legend.text = c("No infarct growth", "Infarct growth"), col=c("#1b9e77","#d95f02"), xlab="Reperfusion", ylab="Number of patients", xpd=F,args.legend = list(x = "topright"), main="Non-recanalizers")
# crosstab of reperfusion vs infarct growth
kable(table(nonrecan_data)) %>%
kable_styling(full_width=F, position="center") %>%
add_header_above(c(" "=1, "Reperfusion"=2)) %>%
group_rows("Infarct growth",1,2)
# test for differences between reperfusion and infarct growth
print(chisq.test(table(nonrecan$reperf, nonrecan$infarct_growth)))
# choose non-recanalizers
nonrecan <- allpts[allpts$Rekan=="None"&allpts$OCC_LOC_1=="PROXIMAL",]
nonrecan_data <- data.frame(nonrecan$infarct_growth, nonrecan$reperf)
# barplot of reperfusion vs infarct growth
barplot(table(nonrecan_data),legend.text = c("No infarct growth", "Infarct growth"), col=c("#1b9e77","#d95f02"), xlab="Reperfusion", ylab="Number of patients", xpd=F,args.legend = list(x = "topright"), main="Non-recanalizers")
# crosstab of reperfusion vs infarct growth
kable(table(nonrecan_data)) %>%
kable_styling(full_width=F, position="center") %>%
add_header_above(c(" "=1, "Reperfusion"=2)) %>%
group_rows("Infarct growth",1,2)
# test for differences between reperfusion and infarct growth
print(chisq.test(table(nonrecan$reperf, nonrecan$infarct_growth)))
?lmrob
str(allpts)
library(effects)
install.packages("effects")
library(effects)
allEffects(model_6)
model_6 <- lmrob(mRS_d90~Rekan*reperf + NIHSS_ad + iv_tPR + HIR1*OCC_LOC_1, data = allpts)
allEffects(model_6)
plot(allEffects(model_6))
plot(allEffects(model_6), multiline=T)
?allEffects
plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3))
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
par(mfrow=c(3,3));plot(allEffects(model_6), multiline=T, ci.style="bars")
?allEffects
View(all_pts)
View(allpts)
test <- data.frame(recan$infarct_growth, recan$reperf)
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
library(summarytools)
library(magrittr)
library(kableExtra)
library(effects)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=";")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# exclude subject 86 (not in Kersten's main dataset)
vols_all_pts <- vols_all_pts[!vols_all_pts$ID=="86",]
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Tmax_D1_.8_volume/vols_all_pts$Tmax_D1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Tmax_D2_.8_volume/vols_all_pts$Tmax_D2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# rename Tmax volume variables to include threshold (>6s)
allpts$Tmax_D1_.6_volume <- allpts$Tmax_vol_d1
allpts$Tmax_D2_.6_volume <- allpts$Tmax_vol_d2
allpts$Tmax_vol_d1 <- c()
allpts$Tmax_vol_d2 <- c()
allpts$Tmax_change <- c()
allpts$relTmax_change <- c()
# create change variables for other thresholds (>4s)
allpts$Tmax_4_change <- allpts$Tmax_D2_.4_volume - allpts$Tmax_D1_.4_volume
allpts$relTmax_4_change <- (allpts$Tmax_4_change/allpts$Tmax_D1_.4_volume)*100
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_4_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_4_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
allpts$Rekan <- factor(allpts$Rekan)
allpts$Rekan <- factor(allpts$Rekan,levels(allpts$Rekan)[c(2,3,1)])
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR[allpts$iv_tPR==2] <- "Yes" # CHECK WITH KERSTEN IF THIS IS CORRECTLY CODED
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
# merge with variables defining occlusion location
occ_classfn <- read.table("occlusion_classfn.csv", header = T, sep=";")
allpts <- merge(allpts, occ_classfn, by = "ID")
# correctly code NaNs
allpts[allpts=="NaN"]<-NA
# Defines whether (T) or not (F) to show outliers in boxplots
OL = F
# choose non-recanalizers
nonrecan <- allpts[allpts$Rekan=="None",]
nonrecan_data <- data.frame(nonrecan$infarct_growth, nonrecan$reperf)
# barplot of reperfusion vs infarct growth
barplot(table(nonrecan_data),legend.text = c("No infarct growth", "Infarct growth"), col=c("#1b9e77","#d95f02"), xlab="Reperfusion", ylab="Number of patients", xpd=F,args.legend = list(x = "topright"), main="Non-recanalizers")
# crosstab of reperfusion vs infarct growth
kable(table(nonrecan_data)) %>%
kable_styling(full_width=F, position="center") %>%
add_header_above(c(" "=1, "Reperfusion"=2)) %>%
group_rows("Infarct growth",1,2)
# test for differences between reperfusion and infarct growth
print(chisq.test(table(nonrecan$reperf, nonrecan$infarct_growth)))
#################################
# choose recanalizers
recan <- allpts[allpts$Rekan=="Full"|allpts$Rekan=="Partial",]
recan_data <- data.frame(recan$infarct_growth, recan$reperf)
# barplot of reperfusion vs infarct growth
barplot(table(recan_data),legend.text = c("No infarct growth", "Infarct growth"), col=c("#1b9e77","#d95f02"), xlab="Reperfusion", ylab="Number of patients", xpd=F,args.legend = list(x = "topleft"), main="Recanalizers")
# crosstab of reperfusion vs infarct growth
kable(table(recan_data)) %>%
kable_styling(full_width=F, position="center") %>%
add_header_above(c(" "=1, "Reperfusion"=2)) %>%
group_rows("Infarct growth",1,2)
# test for differences between reperfusion and infarct growth
print(chisq.test(table(recan$reperf, recan$infarct_growth)))
test <- data.frame(recan$infarct_growth, recan$reperf, recan$OCC_LOC_1)
table(test)
barplot(table(test))
barplot(table(recan_data))
barplot(table(test))
str(test)
test <- data.frame(recan[recan$OCC_LOC_1=="PROXIMAL"]$infarct_growth, recan[recan$OCC_LOC_1=="PROXIMAL"]$reperf)
test <- data.frame(recan[recan$OCC_LOC_1=="PROXIMAL",]$infarct_growth, recan[recan$OCC_LOC_1=="PROXIMAL",]$reperf)
barplot(table(test))
test
barplot(table(test))
test <- data.frame(recan[recan$OCC_LOC_1=="DISTAL",]$infarct_growth, recan[recan$OCC_LOC_1=="DISTAL",]$reperf)
barplot(table(test))
mantelhaen.test()
recan_occ <- data.frame(recan$infarct_growth, recan$reperf, recan$OCC_LOC_1)
nonrecan_occ <- data.frame(nonrecan$infarct_growth, nonrecan$reperf, nonrecan$OCC_LOC_1)
mantelhaen.test(recan_occ)
mantelhaen.test(array(recan_occ))
recan_occ
str(recan_occ)
mantelhaen.test(table(recan_occ))
mantelhaen.test(table(nonrecan_occ))
lr_test <- data.frame(allpts$Rekan, allpts$infarct_growth, allpts$reperf, allpts$OCC_LOC_1)
lr_model_1 <- glm(infarct_growth~.,family = binomial(link="logit"), data=lr_test)
lr_model_1 <- glm(infarct_growth~.,family = binomial(link="logit"), data=lr_test)
lr_model_1 <- glm(allpts.infarct_growth~.,family = binomial(link="logit"), data=lr_test)
summary(lr_model_1)
plot(allEffects(model_9), multiline=T, ci.style="bars")
model_9 <- glm(infarct_growth~Rekan*reperf*OCC_LOC_1,family = binomial(link="logit"), data=allpts)
plot(allEffects(model_9), multiline=T, ci.style="bars")
dev.off()
plot(allEffects(model_9), multiline=T, ci.style="bars")
pwr.f2.test()
install.packages("pwr")
library(pwr)
pwr.f2.test(f2=0.35, sig.level = 0.05, power=80)
pwr.f2.test(u= 8, f2=0.35, sig.level = 0.05, power=80)
pwr.f2.test(u= 8, f2=0.35, sig.level = 0.05, power=0.8)
pwr.f2.test(u= 8, f2=0.8, sig.level = 0.05, power=0.8)
pwr.f2.test(u= 8, f2=0.1, sig.level = 0.05, power=0.8)
pwr.f2.test(u= 8, f2=0.1, sig.level = 0.05, power=0.8)
pwr.f2.test(u= 8, f2=0.05, sig.level = 0.05, power=0.8)
pwr.f2.test(u= 8, f2=0.1, sig.level = 0.05, power=0.8)
pwr.f2.test(u=10, f2=0.1, sig.level = 0.05, power=0.8)
pwr.f2.test(u=11, f2=0.1, sig.level = 0.05, power=0.8)
pwr.f2.test(u=11, f2=0.1, sig.level = 0.05, power=0.9)
pwr.f2.test(u= 8, f2=0.1, sig.level = 0.05, power=0.9)
pwrtest <- pwr.f2.test(u= 8, f2=0.1, sig.level = 0.05, power=0.9)
library(pwr)
pwrtest <- pwr.f2.test(u= 8, f2=0.1, sig.level = 0.05, power=0.9)
pwrtest$method
cite(pwr)
citation(pwr)
citation(pwr.f2.test())
cite(pwr.f2.test())
citation(pwr)
citation(package = "pwr")
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
library(summarytools)
library(magrittr)
library(kableExtra)
library(effects)
library(pwr)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=";")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# exclude subject 86 (not in Kersten's main dataset)
vols_all_pts <- vols_all_pts[!vols_all_pts$ID=="86",]
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Tmax_D1_.8_volume/vols_all_pts$Tmax_D1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Tmax_D2_.8_volume/vols_all_pts$Tmax_D2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# rename Tmax volume variables to include threshold (>6s)
allpts$Tmax_D1_.6_volume <- allpts$Tmax_vol_d1
allpts$Tmax_D2_.6_volume <- allpts$Tmax_vol_d2
allpts$Tmax_vol_d1 <- c()
allpts$Tmax_vol_d2 <- c()
allpts$Tmax_change <- c()
allpts$relTmax_change <- c()
# create change variables for other thresholds (>4s)
allpts$Tmax_4_change <- allpts$Tmax_D2_.4_volume - allpts$Tmax_D1_.4_volume
allpts$relTmax_4_change <- (allpts$Tmax_4_change/allpts$Tmax_D1_.4_volume)*100
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_4_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_4_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
allpts$Rekan <- factor(allpts$Rekan)
allpts$Rekan <- factor(allpts$Rekan,levels(allpts$Rekan)[c(2,3,1)])
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR[allpts$iv_tPR==2] <- "Yes" # CHECK WITH KERSTEN IF THIS IS CORRECTLY CODED
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
# merge with variables defining occlusion location
occ_classfn <- read.table("occlusion_classfn.csv", header = T, sep=";")
allpts <- merge(allpts, occ_classfn, by = "ID")
# correctly code NaNs
allpts[allpts=="NaN"]<-NA
# Defines whether (T) or not (F) to show outliers in boxplots
OL = F
allpts$Rekan
levels(allpts$Rekan)
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
library(summarytools)
library(magrittr)
library(kableExtra)
library(effects)
library(pwr)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=";")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# exclude subject 86 (not in Kersten's main dataset)
vols_all_pts <- vols_all_pts[!vols_all_pts$ID=="86",]
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Tmax_D1_.8_volume/vols_all_pts$Tmax_D1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Tmax_D2_.8_volume/vols_all_pts$Tmax_D2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# rename Tmax volume variables to include threshold (>6s)
allpts$Tmax_D1_.6_volume <- allpts$Tmax_vol_d1
allpts$Tmax_D2_.6_volume <- allpts$Tmax_vol_d2
allpts$Tmax_vol_d1 <- c()
allpts$Tmax_vol_d2 <- c()
allpts$Tmax_change <- c()
allpts$relTmax_change <- c()
# create change variables for other thresholds (>4s)
allpts$Tmax_4_change <- allpts$Tmax_D2_.4_volume - allpts$Tmax_D1_.4_volume
allpts$relTmax_4_change <- (allpts$Tmax_4_change/allpts$Tmax_D1_.4_volume)*100
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_4_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_4_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
#allpts$Rekan <- factor(allpts$Rekan)
#allpts$Rekan <- factor(allpts$Rekan,levels(allpts$Rekan)[c(2,3,1)])
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR[allpts$iv_tPR==2] <- "Yes" # CHECK WITH KERSTEN IF THIS IS CORRECTLY CODED
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
# merge with variables defining occlusion location
occ_classfn <- read.table("occlusion_classfn.csv", header = T, sep=";")
allpts <- merge(allpts, occ_classfn, by = "ID")
# correctly code NaNs
allpts[allpts=="NaN"]<-NA
# Defines whether (T) or not (F) to show outliers in boxplots
OL = F
levels(allpts$Rekan)
allpts$Rekan <- factor(allpts$Rekan)
levels(allpts$Rekan)
setwd("S:\AG\AG-CSB_NeuroRad2\khalila\TESTING_WIP\HAPPY\CSB-TRIO_20160517_134524")
setwd("S:/AG/AG-CSB_NeuroRad2/khalila/TESTING_WIP/HAPPY/CSB-TRIO_20160517_134524")
plot(read.csv("HAPPY_default_cardiacfromfmri.txt"))
plot(read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
plot(seq(0,850),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
plot(seq(1,850),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
length(read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
nrow(read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
plot(seq(1,850,5099),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
plot(seq(1,5099),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
plot(seq(0,5099),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
fmri_card <- read.csv("HAPPY_default_cardiacfromfmri.txt", sep=",")
fmri_card
plot(seq(0,5099),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
plot(seq(0,5099),t(read.csv("HAPPY_default_cardiacfromfmri.txt", sep=",")))
plot(seq(0,5099),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=",")[2])
plot(seq(0,5099),read.csv("HAPPY_default_cardiacfromfmri.txt", sep=",")[1])
nrow(read.csv("HAPPY_default_cardiacfromfmri.txt", sep=","))
nrow(fmri_card)
plot(seq(0,nrow(fmri_card)),fmri_card)
plot(seq(1,nrow(fmri_card)),fmri_card)
plot(fmri_card)
str(fmri_card)
fmri_card$X.0.00892044564132
plot(seq(1,nrow(fmri_card)),fmri_card$X.0.00892044564132)
plot(seq(1,nrow(fmri_card)),fmri_card$X.0.00892044564132, type="l")
plot(seq(1,nrow(fmri_card)),fmri_card$X.0.00892044564132, type="l", xlim=c(0,100))
plot(seq(1,nrow(fmri_card)),fmri_card$X.0.00892044564132, type="l", xlim=c(0,200))
fund_card <- read.csv("HAPPY_default_cardiacfundamental.txt", sep=",")
plot(seq(1,nrow(fund_card)),fund_card$X.0.00892044564132, type="l")
plot(seq(1,nrow(fund_card)),fund_card$X.0.00432818236708, type="l")
plot(seq(1,nrow(fund_card)),fund_card$X.0.00432818236708, type="l", xlim=c(0,200))
lines(seq(1,nrow(fmri_card)),fmri_card$X.0.00892044564132, col="red")
