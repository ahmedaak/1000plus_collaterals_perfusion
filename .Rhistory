# plot SNR & QC results
snr_data <- read.table("/AG/AG-Vaskulaere-Demenz/VCI/Ahmed/19F_VCI_Study/19F_VCI_InVivo/SNR_ANALYSIS/SNR_results.csv",header = T, sep = ";")
# plot mean SNR
matplot(snr_data[c(1:4),], type = "b", lty = c(1), pch = c(19,15,17), col = c("black", "red", "blue", "green4"), xaxt = "n", ylab = "SNR (a.u.)", xlab = "Timepoints", cex.axis=fontsize,cex.lab=fontsize);
axis(1,at = c(1:4), labels = c("-1W","24h","1W","4W"), cex.axis=fontsize,cex.lab=fontsize)
# plot number of voxels
matplot(snr_data[c(5:8),], type = "b", lty = c(1), pch = c(19,15,17), col = c("black", "red", "blue", "green4"), xaxt = "n", ylab = "Number of voxels", xlab = "Timepoints", cex.axis=fontsize,cex.lab=fontsize)
axis(1,at = c(1:4), labels = c("-1W","24h","1W","4W"), cex.axis=fontsize,cex.lab=fontsize)
# plot 19F signal
signal_data <- read.table("/AG/AG-Vaskulaere-Demenz/VCI/Ahmed/19F_VCI_Study/19F_VCI_InVivo/SNR_ANALYSIS/signal_quantification.csv",header = T,sep = ";")
matplot(signal_data, type = "b", lty = c(1), pch = c(19,15,17), col = c("black", "red", "blue", "green4"), xaxt = "n", ylab = "Signal", xlab = "Timepoints", cex.axis=fontsize,cex.lab=fontsize)
axis(1,at = c(1:4), labels = c("-1W","24h","1W","4W"), cex.axis=fontsize,cex.lab=fontsize)
rm(list=ls()) # clear variables
##### SET FONT SIZE FOR CEX #####
fontsize <- 1.5
# plot SNR & QC results
snr_data <- read.table("/AG/AG-Vaskulaere-Demenz/VCI/Ahmed/19F_VCI_Study/19F_VCI_InVivo/SNR_ANALYSIS/SNR_results.csv",header = T, sep = ";")
# plot mean SNR
matplot(snr_data[c(1:4),], type = "b", lty = c(1), pch = c(19,15,17), col = c("black", "red", "blue", "green4"), xaxt = "n", ylab = "SNR (a.u.)", xlab = "Timepoints", cex.axis=fontsize,cex.lab=fontsize);
axis(1,at = c(1:4), labels = c("-1W","24h","1W","4W"), cex.axis=fontsize,cex.lab=fontsize)
# plot number of voxels
matplot(snr_data[c(5:8),], type = "b", lty = c(1), pch = c(19,15,17), col = c("black", "red", "blue", "green4"), xaxt = "n", ylab = "Number of voxels", xlab = "Timepoints", cex.axis=fontsize,cex.lab=fontsize)
axis(1,at = c(1:4), labels = c("-1W","24h","1W","4W"), cex.axis=fontsize,cex.lab=fontsize)
# plot 19F signal
signal_data <- read.table("/AG/AG-Vaskulaere-Demenz/VCI/Ahmed/19F_VCI_Study/19F_VCI_InVivo/SNR_ANALYSIS/signal_quantification.csv",header = T,sep = ";")
matplot(signal_data, type = "b", lty = c(1), pch = c(19,15,17), col = c("black", "red", "blue", "green4"), xaxt = "n", ylab = "Signal", xlab = "Timepoints", cex.axis=fontsize,cex.lab=fontsize)
axis(1,at = c(1:4), labels = c("-1W","24h","1W","4W"), cex.axis=fontsize,cex.lab=fontsize)
getwd()
getwd()
setwd("S:/AG/AG-CSB_NeuroRad/khalila/KV_collaterals_1000plus/")
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";")
str(auto_pts)
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";")
all_pts <- merge(auto_pts, manual_pts, by = "ID")
View(all_pts)
?merge
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";")
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";")
139+47
allpts <- read.table("Carmela_Project.csv", header = T, sep=",")
all_pts <- merge(auto_pts, manual_pts, by = "ID")
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";")
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";")
all_pts <- merge(auto_pts, manual_pts, by = "ID")
View(auto_pts)
View(manual_pts)
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";")
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";")
all_pts <- merge(auto_pts, manual_pts, by = "ID")
all_pts <- rbind(auto_pts, manual_pts)
View(all_pts)
all_pts_sorted <- all_pts[order(ID),]
all_pts_sorted <- all_pts[order(all_pts$ID),]
View(all_pts_sorted)
duplicated(all_pts)
duplicated(all_pts$ID)
mega_allpts <- merge(all_pts, allpts)
mega_allpts <- merge(all_pts, allpts, by="ID")
View(allpts)
colnames(allpts)[1] <- "ID"
mega_allpts <- merge(all_pts, allpts, by="ID")
View(mega_allpts)
View(allpts)
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";")
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";")
all_pts <- rbind(auto_pts, manual_pts)
mega_allpts <- merge(all_pts, allpts, by="ID")
View(mega_allpts)
auto_pts <- auto_pts[,c(3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(3,5,7,9,11,13)]
auto_pts[,-1] <- auto_pts[,-1]*0.001
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
auto_pts[,-1] <- auto_pts[,-1]*0.001
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
vols_all_pts <- rbind(auto_pts, manual_pts)
View(vols_all_pts)
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=",")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Day1_.8_volume/vols_all_pts$Day1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Day2_.8_volume/vols_all_pts$Day2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
allpts$Rekan <- factor(allpts$Rekan)
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
View(allpts)
allpts <- read.table("Carmela_Project.csv", header = T, sep=",")
colnames(allpts)[1] <- "ID"
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
vols_all_pts <- rbind(auto_pts, manual_pts)
View(vols_all_pts)
vols_all_pts$HIR1 <- vols_all_pts$Day1_.8_volume/vols_all_pts$Day1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Day2_.8_volume/vols_all_pts$Day2_.2_volume
View(vols_all_pts)
allpts_test <- merge(allpts, vols_all_pts, by = "ID")
allpts$ID
plot(allpts$ID, vols_all_pts$ID)
vols_all_pts$ID
order(vols_all_pts$ID)
plot(allpts$ID, vols_all_pts$ID)
View(vols_all_pts)
allpts[~allpts['ID'].isin(vols_all_pts ['ID'])]
allpts[~allpts['ID'].isin(vols_all_pts['ID'])]
subset(allpts, !(vols_all_pts %in% a$x))
setdiff(allpts$ID, vols_all_pts$ID)
setdiff(vols_all_pts$ID, allpts$ID)
View(allpts)
vols_all_pts[vols_all_pts$ID=="86",]
vols_all_pts_new <- vols_all_pts[!vols_all_pts$ID=="86",]
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=",")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# exclude subject 86 (not in Kersten's main dataset)
vols_all_pts <- vols_all_pts[!vols_all_pts$ID=="86",]
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Day1_.8_volume/vols_all_pts$Day1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Day2_.8_volume/vols_all_pts$Day2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
allpts$Rekan <- factor(allpts$Rekan)
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
setdiff(vols_all_pts$ID, allpts$ID)
setdiff(allpts$ID, vols_all_pts)
setdiff(allpts$ID, vols_all_pts$ID)
?describe
??describe
install.packages("summarytools")
library("summarytools")
dfSummary(allpts[,-1])
?dfSummary
View(all_pts)
View(allpts)
View(allpts)
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
library(summarytools)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=",")
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
library(summarytools)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=",")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# exclude subject 86 (not in Kersten's main dataset)
vols_all_pts <- vols_all_pts[!vols_all_pts$ID=="86",]
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Tmax_D1_.8_volume/vols_all_pts$Tmax_D1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Tmax_D2_.8_volume/vols_all_pts$Tmax_D2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# rename Tmax volume variables to include threshold (>6s)
allpts$Tmax_D1_.6_volume <- allpts$Tmax_vol_d1
allpts$Tmax_D2_.6_volume <- allpts$Tmax_vol_d2
allpts$Tmax_vol_d1 <- c()
allpts$Tmax_vol_d2 <- c()
allpts$Tmax_change <- c()
allpts$relTmax_change <- c()
# create change variables for other thresholds (>4s)
allpts$Tmax_4_change <- allpts$Tmax_D2_.4_volume - allpts$Tmax_D1_.4_volume
allpts$relTmax_4_change <- allpts$Tmax_4_change/allpts$Tmax_D1_.4_volume
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_4_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_4_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
allpts$Rekan <- factor(allpts$Rekan)
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR[allpts$iv_tPR==2] <- "Yes" # CHECK WITH KERSTEN IF THIS IS CORRECTLY CODED
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
# descriptive stats
#html(describe(allpts[,-1]))
dfSummary(allpts[,-1], plain.ascii = F, style="grid", graph.col = F)
knitr::opts_chunk$set(echo = TRUE)
# necessary packages
library(robustbase)
library(knitr)
library(xtable)
library(Hmisc)
library(TOSTER)
library(stargazer)
library(summarytools)
# load data
allpts <- read.table("Carmela_Project.csv", header = T, sep=",")
colnames(allpts)[1] <- "ID"
# load volumetric data
auto_pts <- read.table("ALLVOLS_automated_AK_20180605.csv", header=T, sep=";") # patients automatically delineated
manual_pts <- read.table("ALLVOLS_manual_AK_20180605.csv", header=T, sep=";") # patients manually delineated
# remove # of voxels, keep only volumes (in mm3)
auto_pts <- auto_pts[,c(1,3,5,7,9,11,13)]
manual_pts <- manual_pts[,c(1,3,5,7,9,11,13)]
# convert volumes to mL (cm3)
auto_pts[,-1] <- auto_pts[,-1]*0.001
manual_pts[,-1] <- manual_pts[,-1]*0.001
# combine manual and automated volumes
vols_all_pts <- rbind(auto_pts, manual_pts)
# exclude subject 86 (not in Kersten's main dataset)
vols_all_pts <- vols_all_pts[!vols_all_pts$ID=="86",]
# calculate HIR for days 1 and 2
vols_all_pts$HIR1 <- vols_all_pts$Tmax_D1_.8_volume/vols_all_pts$Tmax_D1_.2_volume
vols_all_pts$HIR2 <- vols_all_pts$Tmax_D2_.8_volume/vols_all_pts$Tmax_D2_.2_volume
# merge volumes and HIR with the rest of the data
allpts <- merge(allpts, vols_all_pts, by = "ID")
# rename Tmax volume variables to include threshold (>6s)
allpts$Tmax_D1_.6_volume <- allpts$Tmax_vol_d1
allpts$Tmax_D2_.6_volume <- allpts$Tmax_vol_d2
allpts$Tmax_vol_d1 <- c()
allpts$Tmax_vol_d2 <- c()
allpts$Tmax_change <- c()
allpts$relTmax_change <- c()
# create change variables for other thresholds (>4s)
allpts$Tmax_4_change <- allpts$Tmax_D2_.4_volume - allpts$Tmax_D1_.4_volume
allpts$relTmax_4_change <- allpts$Tmax_4_change/allpts$Tmax_D1_.4_volume
# create necessary variables (reperfusion / infarct growth binarized cut-offs)
allpts$reperf[allpts$relTmax_4_change<=-50] <- "Yes"
allpts$reperf[allpts$relTmax_4_change>-50] <- "No"
allpts$reperf <- factor(allpts$reperf)
allpts$infarct_growth[allpts$DWIgrowth>=7] <- "Yes"
allpts$infarct_growth[allpts$DWIgrowth<7] <- "No"
allpts$infarct_growth <- factor(allpts$infarct_growth)
# recode recanalization variable
allpts$Rekan[allpts$Rekan==0] <- "None" # no recanalization
allpts$Rekan[allpts$Rekan==1] <- "Full" # full recanalization
allpts$Rekan[allpts$Rekan==2] <- "Partial" # partial recanalization
allpts$Rekan <- factor(allpts$Rekan)
# recode other categorical variables
allpts$sex[allpts$sex==1] <- "Male"
allpts$sex[allpts$sex==2] <- "Female"
allpts$sex <- factor(allpts$sex)
allpts$iv_tPR[allpts$iv_tPR==0] <- "No"
allpts$iv_tPR[allpts$iv_tPR==1] <- "Yes"
allpts$iv_tPR[allpts$iv_tPR==2] <- "Yes" # CHECK WITH KERSTEN IF THIS IS CORRECTLY CODED
allpts$iv_tPR <- factor(allpts$iv_tPR)
allpts$circulation[allpts$circulation==1] <- "Anterior"
allpts$circulation[allpts$circulation==2] <- "Posterior"
allpts$circulation <- factor(allpts$circulation)
# remove certain variables
allpts$no_recan_1 <- c()
allpts$VAR00002 <- c()
allpts$TSI_dich <- c()
# descriptive stats
#html(describe(allpts[,-1]))
dfSummary(allpts[,-1], plain.ascii = F, style="grid", graph.col = F)
# cross-tabulation of recanalization/reperfusion
kable(table(allpts$reperf, allpts$Rekan))
barplot(table(allpts$reperf, allpts$Rekan), legend.text = c("No reperfusion", "Reperfusion"), col=c("#1b9e77","#d95f02"), xlab="Recanalization", ylab="% of patients", xpd=F,args.legend = list(x = "topleft"), ylim=c(0,80))
# test for differences between recanalization and reperfusion
print(chisq.test(table(allpts$reperf, allpts$Rekan)))
# check assumptions of ANCOVA
par(mfrow=c(2,2))
plot(lm(allpts$relTmax_4_change~allpts$Rekan + allpts$circulation + allpts$TSI + allpts$iv_tPR))
# perform ANCOVA
summary(lm(allpts$relTmax_4_change~allpts$Rekan + allpts$circulation + allpts$TSI + allpts$iv_tPR))
# test if circulation has influence on reperfusion in non-recanalizers
model_1 <- lmrob(allpts[allpts$Rekan=="None",]$relTmax_4_change~allpts[allpts$Rekan=="None",]$circulation)
# test if circulation has influence on reperfusion in non-recanalizers ADNJUSTING FOR iv TPA
model_2 <- lmrob(allpts[allpts$Rekan=="None",]$relTmax_4_change~allpts[allpts$Rekan=="None",]$circulation*allpts[allpts$Rekan=="None",]$iv_tPR)
# test if circulation has influence on reperfusion in recanalizers (full OR partial)
model_3 <- lmrob(allpts[allpts$Rekan=="Full"|allpts$Rekan=="Partial",]$relTmax_4_change~allpts[allpts$Rekan=="Full"|allpts$Rekan=="Partial",]$circulation)
stargazer(model_1, model_2, model_3, type="html", align = F, style="all", single.row=T)
# check assumptions of robust GLM
par(mfrow=c(3,2))
plot(lmrob(allpts$relTmax_4_change~allpts$Rekan + allpts$circulation + allpts$TSI + allpts$iv_tPR))
# perform robust GLM
model_4 <- lmrob(allpts$relTmax_4_change~allpts$Rekan + allpts$circulation + allpts$TSI + allpts$iv_tPR)
par(mfrow=c(1,1))
boxplot(relTmax_4_change~Rekan, data=allpts, col=c("#1b9e77","#1b9e77"), ylab="Relative Tmax change")
stargazer(model_4, type="html", align = F, style="all", single.row=T)
# perform robust GLM
model_5 <- lmrob(allpts$mRS_d90~allpts$Rekan*allpts$reperf + allpts$NIHSS_ad + allpts$iv_tPR +allpts$TSI + allpts$rel_DWIgrowth + allpts$mismatch_vol)
allpts$reperf
allpts$relTmax_4_change
View(allpts)
plot(allpts$HIR1, allpts$DWIgrowth)
plot(HIR1, DWIgrowth, data=allpts)
plot(allpts[,]$HIR1, allpts$DWIgrowth)
plot(allpts$HIR1, allpts$DWIgrowth)
plot(allpts[allpts$Rekan=="None",]$HIR1, allpts$DWIgrowth)
plot(allpts[allpts$Rekan=="None",]$HIR1, allpts[allpts$Rekan=="None",]$DWIgrowth)
points(allpts[allpts$Rekan=="Full",]$HIR1, allpts[allpts$Rekan=="Full",]$DWIgrowth, col="red")
points(allpts[allpts$Rekan=="Partial",]$HIR1, allpts[allpts$Rekan=="Partial",]$DWIgrowth, col="blue")
cor(allpts[allpts$Rekan=="None",]$HIR1, allpts[allpts$Rekan=="None",]$DWIgrowth)
cor(allpts[allpts$Rekan=="Full",]$HIR1, allpts[allpts$Rekan=="Full",]$DWIgrowth)
cor(allpts[allpts$Rekan=="Partial",]$HIR1, allpts[allpts$Rekan=="Partial",]$DWIgrowth)
cor(allpts[allpts$Rekan=="Partial",]$HIR1, allpts[allpts$Rekan=="Partial",]$rel_DWIgrowth)
cor(allpts[allpts$Rekan=="None",]$HIR1, allpts[allpts$Rekan=="None",]$rel_DWIgrowth)
cor(allpts[allpts$Rekan=="Full",]$HIR1, allpts[allpts$Rekan=="Full",]$rel_DWIgrowth)
plot(allpts[allpts$Rekan=="None",]$HIR1, allpts[allpts$Rekan=="None",]$DWIgrowth, pch=19)
points(allpts[allpts$Rekan=="Full",]$HIR1, allpts[allpts$Rekan=="Full",]$DWIgrowth, col="red", pch=19)
points(allpts[allpts$Rekan=="Partial",]$HIR1, allpts[allpts$Rekan=="Partial",]$DWIgrowth, col="blue", pch=19)
points(allpts[allpts$Rekan=="Partial",]$HIR1, allpts[allpts$Rekan=="Partial",]$DWIgrowth, col="green", pch=19)
plot(allpts[allpts$Rekan=="None",]$HIR1, allpts[allpts$Rekan=="None",]$DWIgrowth, pch=19, log="xy")
points(allpts[allpts$Rekan=="Partial",]$HIR1, allpts[allpts$Rekan=="Partial",]$DWIgrowth, col="blue", pch=19)
points(allpts[allpts$Rekan=="Partial",]$HIR1, allpts[allpts$Rekan=="Partial",]$DWIgrowth, col="green", pch=19)
points(allpts[allpts$Rekan=="Full",]$HIR1, allpts[allpts$Rekan=="Full",]$DWIgrowth, col="red", pch=19)
plot(allpts$HIR1, allpts$DWIvol_d1)
cor(allpts$HIR1, allpts$DWIvol_d1)
cor(allpts$HIR1, allpts$DWIvol_d2)
cor(allpts$HIR2, allpts$DWIvol_d2)
cor(allpts$HIR2, allpts$DWIvol_d2, na.rm=T)
cor(allpts$HIR2, allpts$DWIvol_d2, na.exclude=T)
cor(allpts$HIR2, allpts$DWIvol_d2)
cor(allpts$HIR1, allpts$DWIvol_d2)
cor(allpts$HIR1, allpts$DWIvol_d1)
plot(allpts$HIR1, allpts$DWIvol_d1, log="xy")
plot(allpts$HIR1, allpts$DWIvol_d1, log="y")
plot(allpts$HIR1, allpts$DWIvol_d1, log="x")
plot(allpts$HIR1, allpts$DWIvol_d1, log="xy")
cor(allpts$HIR1, allpts$DWIvol_d1)
cor.test(allpts$HIR1, allpts$DWIvol_d1)
cor.test(allpts$HIR1, allpts$DWIvol_d1, paired=T)
cor.test(allpts$HIR1, allpts$DWIvol_d1, method="Spearman")
cor.test(allpts$HIR1, allpts$DWIvol_d1, method="spearman")
cor.test(allpts$HIR1, allpts$mismatch_vol, method="spearman")
plot(allpts$HIR1, allpts$mismatch_vol)
plot(allpts$HIR1, allpts$mismatch_vol, log="xy")
plot(allpts$HIR1, allpts$mismatch_vol)
plot(allpts$HIR1, allpts$Tmax_D1_.2_volume-allpts$DWIvol_d1)
plot(allpts$HIR1, allpts$Tmax_D1_.4_volume-allpts$DWIvol_d1)
plot(allpts$HIR1, allpts$Tmax_D1_.5_volume-allpts$DWIvol_d1)
plot(allpts$HIR1, allpts$Tmax_D1_.6_volume-allpts$DWIvol_d1)
plot(allpts$HIR1, allpts$mismatch_vol)
plot(allpts$HIR1, allpts$Tmax_D1_.8_volume-allpts$DWIvol_d1)
cor.test(allpts$HIR1, allpts$Tmax_D1_.8_volume-allpts$DWIvol_d1, method = "spearman")
plot(allpts$HIR1, allpts$HIR2)
abline(h)
matplot(allpts$HIR1, allpts$HIR2)
boxplot(allpts$HIR1, allpts$HIR2)
ggplot(allpts, aes(x=))
lines(allpts$HIR1, allpts$HIR2)
boxplot(allpts$HIR1, allpts$HIR2)
lines(allpts$HIR1, allpts$HIR2)
plot(allpts$HIR1, allpts$HIR2)
plot(allpts$HIR1-allpts$HIR2)
plot(allpts$HIR2-allpts$HIR1)
plot(allpts$HIR2-allpts$HIR1, allpts$DWIgrowth)
cor.test(allpts$HIR2-allpts$HIR1, allpts$DWIgrowth)
plot(allpts$HIR2-allpts$HIR1, allpts$DWIgrowth)
plot(allpts$HIR2-allpts$HIR1, allpts$rel_DWIgrowth)
setwd("S:\AG\AG-CSB_NeuroRad\khalila\MULTIBAND\Reproducibility\ANALYSIS_AK_20180612\C_01\D0")
setwd("S:/AG/AG-CSB_NeuroRad/khalila/MULTIBAND/Reproducibility/ANALYSIS_AK_20180612/C_01/D0")
read.csv("vs_tc.txt")
vs <- read.csv("vs_tc.txt")
plot(vs)
View(vs)
plot(t(vs))
plot(vs)
plot(seq(from=0, to=lenght(vs)),vs)
plot(seq(from=0, to=length(vs)),vs)
plot(seq(from=1, to=length(vs)),vs)
length(vs)
nrows(vs)
nrow(vs)
plot(seq(from=1, to=nrow(vs)),vs)
plot(seq(from=0, to=nrow(vs)),vs)
seq(from=0, to=nrow(vs))
seq(from=0, to=nrow(vs), by=1)
plot(seq(from=0, to=nrow(vs), by=1),vs)
plot(seq(from=0, to=nrow(vs), by=1),t(vs))
nrow(from=0,to=nrow(vs),by=1)
nrow(seq(from=0,to=nrow(vs),by=1))
length(seq(from=0,to=nrow(vs),by=1))
length(seq(from=1,to=nrow(vs),by=1))
plot(seq(from=1, to=nrow(vs), by=1),t(vs))
plot(seq(from=1, to=nrow(vs), by=1),t(vs), type="l")
plot(seq(from=1, to=825*0.4, by=1),t(vs), type="l")
plot(seq(from=1, to=825*0.4),t(vs), type="l")
